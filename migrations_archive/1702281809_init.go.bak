package migrations

import (
	"encoding/json"

	"github.com/pocketbase/dbx"
	"github.com/pocketbase/pocketbase/daos"
	m "github.com/pocketbase/pocketbase/migrations"
	"github.com/pocketbase/pocketbase/models"
)

func init() {
	m.Register(func(db dbx.Builder) error {
		dao := daos.New(db)

		collections := `[{"id":"_pb_users_auth_","name":"users","type":"auth","system":false,"schema":[{"system":false,"id":"users_name","name":"name","type":"text","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"pattern":""}},{"system":false,"id":"users_avatar","name":"avatar","type":"file","required":false,"presentable":false,"unique":false,"options":{"mimeTypes":["image/jpeg","image/png","image/svg+xml","image/gif","image/webp"],"thumbs":null,"maxSelect":1,"maxSize":5242880,"protected":false}}],"indexes":[],"listRule":"@request.auth.id != ''","viewRule":"@request.auth.id != ''","createRule":"@request.auth.id != ''","updateRule":"@request.auth.id != ''","deleteRule":"@request.auth.id != ''","options":{"allowEmailAuth":true,"allowOAuth2Auth":true,"allowUsernameAuth":true,"exceptEmailDomains":null,"manageRule":null,"minPasswordLength":8,"onlyEmailDomains":null,"onlyVerified":false,"requireEmail":false}},{"id":"ohjfg1757c326vj","name":"disbursements","type":"base","system":false,"schema":[{"system":false,"id":"lcdmh81v","name":"encounter","type":"relation","required":false,"presentable":false,"unique":false,"options":{"collectionId":"u3kkpzq3dnqq4zt","cascadeDelete":false,"minSelect":null,"maxSelect":1,"displayFields":null}},{"system":false,"id":"2a8syrkf","name":"medication","type":"relation","required":false,"presentable":false,"unique":false,"options":{"collectionId":"lji3c7jtcyl55iw","cascadeDelete":false,"minSelect":null,"maxSelect":1,"displayFields":null}},{"system":false,"id":"8mpwgtun","name":"quantity","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":false}},{"system":false,"id":"lgzrcnok","name":"disbursement_multiplier","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":false}}],"indexes":[],"listRule":"@request.auth.id != ''","viewRule":"@request.auth.id != ''","createRule":"@request.auth.id != ''","updateRule":"@request.auth.id != ''","deleteRule":"@request.auth.id != ''","options":{}},{"id":"u3kkpzq3dnqq4zt","name":"encounters","type":"base","system":false,"schema":[{"system":false,"id":"giucdbop","name":"patient","type":"relation","required":false,"presentable":false,"unique":false,"options":{"collectionId":"mdebu5it7k929tv","cascadeDelete":false,"minSelect":null,"maxSelect":1,"displayFields":null}},{"system":false,"id":"dpetubum","name":"height_inches","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":true}},{"system":false,"id":"4vwszky7","name":"weight","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":false}},{"system":false,"id":"pngtqbdx","name":"temperature","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":false}},{"system":false,"id":"lufjssqe","name":"heart_rate","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":true}},{"system":false,"id":"kxxfrydg","name":"systolic_pressure","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":true}},{"system":false,"id":"0ojvqwrb","name":"diastolic_pressure","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":true}},{"system":false,"id":"bi9rnlk1","name":"chief_complaint","type":"select","required":false,"presentable":false,"unique":false,"options":{"maxSelect":2,"values":["sample1","sample2","sample3"]}}],"indexes":[],"listRule":"@request.auth.id != ''","viewRule":"@request.auth.id != ''","createRule":"@request.auth.id != ''","updateRule":"@request.auth.id != ''","deleteRule":"@request.auth.id != ''","options":{}},{"id":"lji3c7jtcyl55iw","name":"inventory","type":"base","system":false,"schema":[{"system":false,"id":"utlqrmmr","name":"drug_name","type":"text","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"pattern":""}},{"system":false,"id":"6qsqg1b9","name":"drug_category","type":"text","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"pattern":""}},{"system":false,"id":"6gkvv4jz","name":"stock","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":false}},{"system":false,"id":"wwrgyjbt","name":"fixed_quantity","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":false}}],"indexes":[],"listRule":"@request.auth.id != ''","viewRule":"@request.auth.id != ''","createRule":"@request.auth.id != ''","updateRule":"@request.auth.id != ''","deleteRule":"@request.auth.id != ''","options":{}},{"id":"mdebu5it7k929tv","name":"patients","type":"base","system":false,"schema":[{"system":false,"id":"geri4xip","name":"date_created","type":"date","required":false,"presentable":false,"unique":false,"options":{"min":"","max":""}},{"system":false,"id":"hc7a0rxf","name":"first_name","type":"text","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"pattern":""}},{"system":false,"id":"zwo5ye1q","name":"last_name","type":"text","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"pattern":""}},{"system":false,"id":"xcuohaaw","name":"gender","type":"select","required":false,"presentable":false,"unique":false,"options":{"maxSelect":1,"values":["Male","Female","Other"]}},{"system":false,"id":"filuzxwq","name":"dob","type":"date","required":false,"presentable":false,"unique":false,"options":{"min":"","max":""}},{"system":false,"id":"clksxcws","name":"age","type":"number","required":false,"presentable":false,"unique":false,"options":{"min":null,"max":null,"noDecimal":true}},{"system":false,"id":"enlgyoxi","name":"smoker","type":"select","required":false,"presentable":false,"unique":false,"options":{"maxSelect":1,"values":["current","prior","never"]}}],"indexes":[],"listRule":"id != ''","viewRule":"id != ''","createRule":"@request.auth.id != ''","updateRule":"@request.auth.id != ''","deleteRule":"@request.auth.id != ''","options":{}}]`

		var collections_data []any
		if err := json.Unmarshal([]byte(collections), &collections_data); err != nil {
			return err
		}

		// Delete existing collections first
		existing_collections := []string{
			"patients",
			"inventory",
			"encounters",
			"disbursements",
			"users",
		}

		for _, name := range existing_collections {
			collection, err := dao.FindCollectionByNameOrId(name)
			if err == nil {
				if err := dao.DeleteCollection(collection); err != nil {
					return err
				}
			}
		}

		// Import collections
		for _, collection_data := range collections_data {
			collection := &models.Collection{}
			jsonData, err := json.Marshal(collection_data)
			if err != nil {
				return err
			}

			if err := json.Unmarshal(jsonData, collection); err != nil {
				return err
			}

			if err := dao.SaveCollection(collection); err != nil {
				return err
			}
		}

		// Create initial admin user
		admin := &models.Admin{}
		admin.Email = "user@example.com"
		admin.SetPassword("password123")

		if err := dao.SaveAdmin(admin); err != nil {
			return err
		}

		// Create test user
		collection, err := dao.FindCollectionByNameOrId("users")
		if err != nil {
			return err
		}

		testUser := models.NewRecord(collection)
		testUser.Set("email", "testuser@example.com")
		testUser.Set("username", "testuser")
		testUser.Set("name", "Test User")
		if err := testUser.SetPassword("password123"); err != nil {
			return err
		}

		if err := dao.SaveRecord(testUser); err != nil {
			return err
		}

		return nil
	}, func(db dbx.Builder) error {
		dao := daos.New(db)

		// Delete collections (in reverse order to handle dependencies)
		collections := []string{
			"patients",
			"inventory",
			"encounters",
			"disbursements",
			"users",
		}

		for _, collection := range collections {
			collection, err := dao.FindCollectionByNameOrId(collection)
			if err != nil {
				return err
			}
			if err := dao.DeleteCollection(collection); err != nil {
				return err
			}
		}

		// Delete admin user
		admin, err := dao.FindAdminByEmail("user@example.com")
		if err == nil {
			if err := dao.DeleteAdmin(admin); err != nil {
				return err
			}
		}

		return nil
	})
}
